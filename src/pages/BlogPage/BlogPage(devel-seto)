import { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { EditFormModal } from "./components/EditFormModal";
import axios from "axios";
import DOMPurify from "dompurify";
import {
  addCommentRoute,
  getCommentsRoute,
  getPostRoute,
} from "../../routes/APIRoutes";
import { CommentBubble } from "../../components/CommentBubble";
import { getCookie } from "../../lib/cookieHelper";

export const BlogPage = ({ isAuth, userStatus }) => {
  const navigate = useNavigate();
  const { id } = useParams();
  const [post, setPost] = useState();
  const [comments, setComments] = useState();
  const [showModal, setShowModal] = useState(false);
  const [renderToggle, setRenderToggle] = useState(false);

  useEffect(() => {
    async function getPost() {
      const { data } = await axios.post(
        getPostRoute,
        { postId: id },
        {
          headers: {
            Authorization: `Bearer ${getCookie("token")}`,
          },
        }
      );
      setPost(data);
      if (!data?.content) navigate("/");
    }

    getPost();
  }, [id, renderToggle]);

  useEffect(() => {
    async function getComments() {
      const { data } = await axios.post(getCommentsRoute, { postId: id });
      if (data.success) {
        const comments = Object.keys(data)
          .filter((key) => !isNaN(key))
          .map((key) => data[key]);
        setComments(comments);
      }
    }
    if (post?.content) getComments();
  }, [renderToggle, post]);

  async function handleAddComment(e) {
    e.preventDefault();
    if (!isAuth) {
      navigate("/login");
      return;
    }
    if (e.target.content.value.trim() === "") {
      alert("Please fill out the comment form to add a comment");
      return;
    }

    const comment = {
      postId: post.id,
      userId: +isAuth,
      commentText: e.target.content.value,
    };
    await axios.post(addCommentRoute, comment);
    e.target.content.value = "";
    setRenderToggle(!renderToggle);
  }

  return (
    <main className="pt-8 pb-16 lg:pt-16 lg:pb-24 bg-white dark:bg-gray-900 antialiased">
      {post && (
        <EditFormModal
          showModal={showModal}
          setShowModal={setShowModal}
          post={post}
          id={id}
          setRenderToggle={setRenderToggle}
          renderToggle={renderToggle}
        />
      )}
      <div className="flex justify-between px-4 mx-auto max-w-screen-lg">
        <article className="mx-auto w-full format format-sm sm:format-base lg:format-lg format-blue dark:format-invert">
          <header className="mb-4 lg:mb-6 not-format">
            <h1 className="mb-4 text-3xl font-extrabold leading-tight text-gray-900 lg:mb-6 lg:text-4xl dark:text-white">
              {post?.title}
            </h1>
          </header>
          <section className="text-lg whitespace-pre-wrap text-justify">
            <p>{post?.content}</p>
          </section>

          {/* Comment Section */}
          <section className="md:mt-32 mt-20">
            <form onSubmit={handleAddComment} className="mb-14">
              <div className="w-full mb-4 border border-gray-200 rounded-lg bg-gray-50 dark:bg-gray-700 dark:border-gray-600">
                <div className="px-4 py-2 bg-white rounded-t-lg dark:bg-gray-800">
                  <textarea
                    name="content"
                    id="comment"
                    rows="4"
                    className="w-full p-2 text-md text-gray-900 bg-white border-0 dark:bg-gray-800 focus:ring-0 dark:text-white dark:placeholder-gray-400"
                    placeholder="Write a comment..."
                  ></textarea>
                </div>
                <div className="flex items-center justify-end px-3 py-2 border-t dark:border-gray-600">
                  <button
                    type="submit"
                    className="inline-flex items-center py-2.5 px-4 text-xs font-medium text-center text-white bg-blue-700 rounded-lg focus:ring-4 focus:ring-blue-200 dark:focus:ring-blue-900 hover:bg-blue-800"
                  >
                    Post comment
                  </button>
                </div>
              </div>
            </form>
            <ul>
              {comments &&
                comments.map((comment) => (
                  <CommentBubble
                    key={comment.id}
                    comment={{
                      ...comment,
                      commentText: DOMPurify.sanitize(comment.commentText),
                    }}
                  />
                ))}
            </ul>
          </section>
        </article>
      </div>
    </main>
  );
};
